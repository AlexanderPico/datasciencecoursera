complete("specdata", 30:25)
?which
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(c(1,2,3,4,5))
cachemean(makeVector(c(1,2,3,4,5))
cachemean(makeVector(c(1,2,3,4,5)))
cachemean(makeVector(c(1,2,3,4,5)))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(makeVector(c(1,2,3,4,5)))
?numeric()
?matrix()
makeMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cachesolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
matrix(1,2,1,2)
matrix(1:6)
matrix(1:6,6:1)
matrix((1:6),ncol=2)
cachesolve(makeMatrix(matrix((1:6),ncol=2)))
cachesolve(makeMatrix(matrix((1:4),ncol=2)))
solve(matrix((1:4),ncol=2))
system_time(cachesolve(makeMatrix(matrix((1:81),ncol=2))))
?time
system.time(cachesolve(makeMatrix(matrix((1:81),ncol=2))))
system.time(cachesolve(makeMatrix(matrix((1:81),ncol=9))))
system.time(cachesolve(makeMatrix(matrix((1:100),ncol=10))))
matrix((1:25),ncol=5)
matrix((1:25),ncol=5)
system.time(cachesolve(makeMatrix(matrix((1:25),ncol=5))))
cachesolve(makeMatrix(matrix((1:25),ncol=5)))
makeMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cachesolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
cachesolve(makeMatrix(matrix((1:25),ncol=5)))
system.time(cachesolve(makeMatrix(matrix(c(1,1,1,1,1,2,1,2,1,1,1,0,1,4,2,3]),ncol=4))))
system.time(cachesolve(makeMatrix(matrix(c(1,1,1,1,1,2,1,2,1,1,1,0,1,4,2,3),ncol=4))))
cachesolve(makeMatrix(matrix(c(1,1,1,1,1,2,1,2,1,1,1,0,1,4,2,3),ncol=4)))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
cacheSolve(makeCacheMatrix(matrix(c(1,1,1,1,1,2,1,2,1,1,1,0,1,4,2,3),ncol=4)))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
return(list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve))
}
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
return(m)
}
cacheSolve(makeCacheMatrix(matrix(c(1,1,1,1,1,2,1,2,1,1,1,0,1,4,2,3),ncol=4)))
system.time(cacheSolve(makeCacheMatrix(matrix(rnorm(1000000), nrow = 1000))))
system.time(cacheSolve(makeCacheMatrix(matrix(rnorm(1000000), nrow = 1000))))
solve(matrix(rnorm(1000000), nrow = 1000))
system.time(cacheSolve(makeCacheMatrix(matrix(rnorm(1000000), nrow = 1000))))
x<-matrix(rnorm(1000000), nrow = 1000)
m<-makeCacheMatrix(x)
system.time(cacheSolve(m))
system.time(cacheSolve(m))
m$set(x)
system.time(cacheSolve(m))
system.time(cacheSolve(m))
m$set(x)
system.time(cacheSolve(m))
system.time(cacheSolve(m))
system.time(cacheSolve(m))
x$solve
?rnorm
m$set(x) #reset matrix (with any matrix, even the same one...)
system.time(cacheSolve(m))  #time third run of cacheSolve (should NOT use cache!)
x<-1:3000   #create a vector
m<-makeVector(x)   #create list of functions for this vector
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
m<-makeVector(x)   #create list of functions for this vector
system.time(cachemean(m))
system.time(cachemean(m))
x<-1:300000   #create a vector
m<-makeVector(x)   #create list of functions for this vector
system.time(cachemean(m))
system.time(cachemean(m))
x<-1:3000000   #create a vector
m<-makeVector(x)   #create list of functions for this vector
system.time(cachemean(m))
system.time(cachemean(m))
x<-1:3000000   #create a vector
m<-makeVector(x)   #create list of functions for this vector
system.time(cachemean(m))
system.time(cachemean(m))
x<-1:5  #create a vector
m<-makeVector(x)   #create list of functions for this vector
cachemean(m)
cachemean(m)
m$set(1:9)
cachemean(m)
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
return(list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve))
}
## Takes a matrix processed by makeCacheMatrix()
## Returns the cached value of the inverted matrix,
##  if available; otherwise, it solves the inversion,
##  caches the value, and returns the value.
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
return(m)
}
x<-matrix(rnorm(1000000), nrow = 1000) #create huge invertable matrix
m<-makeCacheMatrix(x) #create function list for this matrix
system.time(cacheSolve(m))  #time first run of cacheSolve
system.time(cacheSolve(m))  #time second run of cacheSolve (should use cache!)
x<-c(1:4,2:10,4:7,10:100)
sapply(x, mean)
x<-list(1:4,2:10,4:7,10:100)
sapply(x, mean)
lapply(x,mean)
m<-matrix(rnorm(200),20,10)
m
?matrix
apply(m,2,mean)
apply(m,1,sum)
apply(m,1,quantile, probs=c(0.25,0.75))
mapply(rep, 1:4, 4:1)
noise<-function(n,mean,sd){
rnorm(n,mean,sd)
}
noise(5,1,2)
noise(5,1,2)
noise(1:5,1:5,2)
mapply(noise,1:5,1:5,2)
x<-c(rnorm(10,runif(10),rnorm(10,1)))
x<-c(rnorm(10),runif(10),rnorm(10,1))
x
g<-gl(3,10)
f<-gl(3,10)
f
tapply(x,f,mean)
split(x,f)
lapply(split(x,f),mean)
sapply(split(x,f),mean)
df<-read.csv("hw1_data.csv")
str(df)
head(df)
s<-split(df,df$Month)
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")], na.rm = T))
df2<-read.csv("pollutantmean.R")
head(df2)
str(df2)
summary(df2)
head(df)
s<-split(df, list(df$M,df$D))
s
str(s)
head(s)
s[5]
s[50]
s[500]
s[100]
s[120]
s[140]
s[150]
s[160]
s[170]
s[155]
s[156]
s[154]
s[153]
s[152]
s<-split(df, list(df$M,df$D),drop=T)
s[152]
s[151]
mean(z)
traceback()
lm(z-y)
traceback()
lm(z-y)
traceback() # call after an error message
debug(lm)
lm(z-y)
library(datasets)
data(iris)
?iris
head(iris)
colMean(iris,iris$Species)
colMeans(iris,iris$Species)
colMeans(iris$Specal.Length,iris$Species)
sapply(iris$Specal.Length,iris$Species)
sapply(s,colMeans(iris$Specal.Length, na.rm = T))
s<-split(iris,iris$Species)
sapply(s,colMeans(iris$Specal.Length, na.rm = T))
sapply(s,mean(iris$Specal.Length, na.rm = T))
s
sapply(s,mean("Specal.Length", na.rm = T))
sapply(s,function(x) mean(x[,"Specal.Length"], na.rm = T))
sapply(s,function(x) colMeans(x[,"Specal.Length"], na.rm = T))
sapply(s,function(x) colMeans(x[,c("Specal.Length","Sepal.Width"], na.rm = T))
sapply(s,function(x) colMeans(x[,c("Specal.Length","Sepal.Width")], na.rm = T))
s<-split(iris,iris$Species)
sapply(s,function(x) colMeans(x[,c("Specal.Length","Sepal.Width")], na.rm = T))
s
s<-split(df,df$Month)
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")], na.rm = T))
s
s<-split(iris,iris$Species)
s
sapply(s,function(x) colMeans(x[,c("Specal.Length","Sepal.Width")], na.rm = T))
s$virginica
sapply(s,function(x) colMeans(x[,"Sepal.Length"], na.rm = T))
sapply(s,function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")], na.rm = T))
sapply(s,function(x) colMeans(x[,"Sepal.Length"], na.rm = T))
sapply(s,function(x) means(x[,"Sepal.Length"], na.rm = T))
sapply(s,function(x) mean(x[,"Sepal.Length"], na.rm = T))
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
head(mtcars)
tapply(mtcars$cyl,mtcars$mpg,mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
s2<-split(iris$Sepal.Length,iris$Species)
sapply(s2,mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
hps<-sapply(split(mtcars$hp, mtcars$cyl), mean)
hps[1]
abs(hps[1]-hps[3])
tapply(iiris$Sepal.Length,iris$Species,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
s<-split(df,df$Month)
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")], na.rm = T))
tapply(df[,c("Ozone","Solar.R","Wind")], df$Month, mean)
tapply(df[,c("Ozone")], df$Month, mean)
tapply(df[,c("Ozone","Solar.R","Wind")], df$Month, mean, na.rm=T)
tapply(df[,c("Ozone")], df$Month, mean, na.rm=T)
tapply(df[,c("Solar.R")], df$Month, mean, na.rm=T)
tapply(df[,c("Wind")], df$Month, mean, na.rm=T)
tapply(df[,1:3], df$Month, mean, na.rm=T)
tapply(df[,1], df$Month, mean, na.rm=T)
tapply(df$Ozone, df$Month, mean, na.rm=T)
tapply(df, df$Month, mean, na.rm=T)
by(df[,c("Ozone","Solar.R","Wind")],df$Month, mean, na.rm=T)
by(df[,1:3],df$Month, mean, na.rm=T)
by(df[,1:3,drop=T],df$Month, mean, na.rm=T)
by(df[,1:3,drop=T],df$Month, mean, na.rm=T)
by(df[,1:3,drop=T],df$Month, mean, na.rm=T,drop=T)
by(df[,1:3,drop=T],df$Month, drop=T, mean, na.rm=T,drop=T)
?datasets
s<-split(iris,iris$Species)
sapply(s,function(x) mean(x[,"Sepal.Length"], na.rm = T))
apply(iris[, 1:4], 2, mean)
head(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
hps<-sapply(split(mtcars$hp, mtcars$cyl), mean)
abs(hps[1]-hps[3])
x<-matrix(rnorm(1000000), nrow = 1000) #create huge invertable matrix
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
return(m)
}
source("best.R")
best("TX", "heart attack")
?download.file()
install.packages("RMySQL")
library(RMySQL)
ucsc<-dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result<-dbGetQuery(ucsc,"show databases;")
dbDisconnect(ucsc)
result
hg19<-dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
tables<-dbListTables(hg19)
length(tables)
tables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
affyData<-dbReadTable(hg19,"affyU133Plus2")
head(affyData)
affyData<-dbReadTable(hg19,"affyU133Plus2")
dbDisconnect(ucsc)
hg19<-dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
dbListFields(hg19,"affyU133Plus2")
affyData<-dbReadTable(hg19,"affyU133Plus2")
head(affyData)
query<-dbSendQuery(hg19,"select * from affyU13Plus2 where misMatches between 1 and 3")
query<-dbSendQuery(hg19,"select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis<-fetch(query)
quantile(affyMis$misMatches)
affySmall<-fetch(query,n=10)
dbClearResult(query)
dim(affySmall)
setwd("/git/datasciencecoursera/3_Get_Data")
f="ss06hid.csv"
df=read.csv(f)
head(df)
?strsplit
names(df[[123]])
names(df[[1]])
name(df[[1]])
dname(df[[1]])
colnames(df[[1]])
colnames(df)
colnames(df)[123]
strsplit(colnames(df)[123]))
strsplit(colnames(df)[123])
strsplit(colnames(df)[123]))
strsplit(colnames(df)[123],"wgtp")
f="GDP.csv"
df=read.csv(f)
head(df)
fgdp=read.csv(f,skip=4,nrows=190)
head(fgdp,n=10)
as.numeric(gsub(",","",df$X.4))
head(fgdp,n=10)
df=read.csv(f,skip=4,nrows=190)
head(df,n=10)
as.numeric(gsub(",","",df$X.4))
head(df,n=10)
df$gdpnum = as.numeric(gsub(",","",df$X.4))
head(df,n=10)
average(df$gdpnum)
mean(df$gdpnum)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv","fgdp.csv",method="curl")
?read.csv
fgdp=read.csv("fgdp.csv",skip=4,nrows=190)
head(fgdp,n=10)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv","fstats.csv",method="curl")
fstats=read.csv("fstats.csv")
head(fstats)
head(fgdp$X)
head(fstats$CountryCode)
fmerge=merge(fgdp,fstats,by.x="X",by.y="CountryCode")
head(fmerge)
head(fmerge$X)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(sampleTimes)
grep("2010",sampleTimes),3
grep("2010",sampleTimes)
grep("2012",sampleTimes)
