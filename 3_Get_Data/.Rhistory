if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
cachesolve(makeMatrix(matrix((1:25),ncol=5)))
system.time(cachesolve(makeMatrix(matrix(c(1,1,1,1,1,2,1,2,1,1,1,0,1,4,2,3]),ncol=4))))
system.time(cachesolve(makeMatrix(matrix(c(1,1,1,1,1,2,1,2,1,1,1,0,1,4,2,3),ncol=4))))
cachesolve(makeMatrix(matrix(c(1,1,1,1,1,2,1,2,1,1,1,0,1,4,2,3),ncol=4)))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
cacheSolve(makeCacheMatrix(matrix(c(1,1,1,1,1,2,1,2,1,1,1,0,1,4,2,3),ncol=4)))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
return(list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve))
}
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
return(m)
}
cacheSolve(makeCacheMatrix(matrix(c(1,1,1,1,1,2,1,2,1,1,1,0,1,4,2,3),ncol=4)))
system.time(cacheSolve(makeCacheMatrix(matrix(rnorm(1000000), nrow = 1000))))
system.time(cacheSolve(makeCacheMatrix(matrix(rnorm(1000000), nrow = 1000))))
solve(matrix(rnorm(1000000), nrow = 1000))
system.time(cacheSolve(makeCacheMatrix(matrix(rnorm(1000000), nrow = 1000))))
x<-matrix(rnorm(1000000), nrow = 1000)
m<-makeCacheMatrix(x)
system.time(cacheSolve(m))
system.time(cacheSolve(m))
m$set(x)
system.time(cacheSolve(m))
system.time(cacheSolve(m))
m$set(x)
system.time(cacheSolve(m))
system.time(cacheSolve(m))
system.time(cacheSolve(m))
x$solve
?rnorm
m$set(x) #reset matrix (with any matrix, even the same one...)
system.time(cacheSolve(m))  #time third run of cacheSolve (should NOT use cache!)
x<-1:3000   #create a vector
m<-makeVector(x)   #create list of functions for this vector
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
m<-makeVector(x)   #create list of functions for this vector
system.time(cachemean(m))
system.time(cachemean(m))
x<-1:300000   #create a vector
m<-makeVector(x)   #create list of functions for this vector
system.time(cachemean(m))
system.time(cachemean(m))
x<-1:3000000   #create a vector
m<-makeVector(x)   #create list of functions for this vector
system.time(cachemean(m))
system.time(cachemean(m))
x<-1:3000000   #create a vector
m<-makeVector(x)   #create list of functions for this vector
system.time(cachemean(m))
system.time(cachemean(m))
x<-1:5  #create a vector
m<-makeVector(x)   #create list of functions for this vector
cachemean(m)
cachemean(m)
m$set(1:9)
cachemean(m)
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
return(list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve))
}
## Takes a matrix processed by makeCacheMatrix()
## Returns the cached value of the inverted matrix,
##  if available; otherwise, it solves the inversion,
##  caches the value, and returns the value.
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
return(m)
}
x<-matrix(rnorm(1000000), nrow = 1000) #create huge invertable matrix
m<-makeCacheMatrix(x) #create function list for this matrix
system.time(cacheSolve(m))  #time first run of cacheSolve
system.time(cacheSolve(m))  #time second run of cacheSolve (should use cache!)
x<-c(1:4,2:10,4:7,10:100)
sapply(x, mean)
x<-list(1:4,2:10,4:7,10:100)
sapply(x, mean)
lapply(x,mean)
m<-matrix(rnorm(200),20,10)
m
?matrix
apply(m,2,mean)
apply(m,1,sum)
apply(m,1,quantile, probs=c(0.25,0.75))
mapply(rep, 1:4, 4:1)
noise<-function(n,mean,sd){
rnorm(n,mean,sd)
}
noise(5,1,2)
noise(5,1,2)
noise(1:5,1:5,2)
mapply(noise,1:5,1:5,2)
x<-c(rnorm(10,runif(10),rnorm(10,1)))
x<-c(rnorm(10),runif(10),rnorm(10,1))
x
g<-gl(3,10)
f<-gl(3,10)
f
tapply(x,f,mean)
split(x,f)
lapply(split(x,f),mean)
sapply(split(x,f),mean)
df<-read.csv("hw1_data.csv")
str(df)
head(df)
s<-split(df,df$Month)
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")], na.rm = T))
df2<-read.csv("pollutantmean.R")
head(df2)
str(df2)
summary(df2)
head(df)
s<-split(df, list(df$M,df$D))
s
str(s)
head(s)
s[5]
s[50]
s[500]
s[100]
s[120]
s[140]
s[150]
s[160]
s[170]
s[155]
s[156]
s[154]
s[153]
s[152]
s<-split(df, list(df$M,df$D),drop=T)
s[152]
s[151]
mean(z)
traceback()
lm(z-y)
traceback()
lm(z-y)
traceback() # call after an error message
debug(lm)
lm(z-y)
library(datasets)
data(iris)
?iris
head(iris)
colMean(iris,iris$Species)
colMeans(iris,iris$Species)
colMeans(iris$Specal.Length,iris$Species)
sapply(iris$Specal.Length,iris$Species)
sapply(s,colMeans(iris$Specal.Length, na.rm = T))
s<-split(iris,iris$Species)
sapply(s,colMeans(iris$Specal.Length, na.rm = T))
sapply(s,mean(iris$Specal.Length, na.rm = T))
s
sapply(s,mean("Specal.Length", na.rm = T))
sapply(s,function(x) mean(x[,"Specal.Length"], na.rm = T))
sapply(s,function(x) colMeans(x[,"Specal.Length"], na.rm = T))
sapply(s,function(x) colMeans(x[,c("Specal.Length","Sepal.Width"], na.rm = T))
sapply(s,function(x) colMeans(x[,c("Specal.Length","Sepal.Width")], na.rm = T))
s<-split(iris,iris$Species)
sapply(s,function(x) colMeans(x[,c("Specal.Length","Sepal.Width")], na.rm = T))
s
s<-split(df,df$Month)
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")], na.rm = T))
s
s<-split(iris,iris$Species)
s
sapply(s,function(x) colMeans(x[,c("Specal.Length","Sepal.Width")], na.rm = T))
s$virginica
sapply(s,function(x) colMeans(x[,"Sepal.Length"], na.rm = T))
sapply(s,function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")], na.rm = T))
sapply(s,function(x) colMeans(x[,"Sepal.Length"], na.rm = T))
sapply(s,function(x) means(x[,"Sepal.Length"], na.rm = T))
sapply(s,function(x) mean(x[,"Sepal.Length"], na.rm = T))
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
head(mtcars)
tapply(mtcars$cyl,mtcars$mpg,mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
s2<-split(iris$Sepal.Length,iris$Species)
sapply(s2,mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
hps<-sapply(split(mtcars$hp, mtcars$cyl), mean)
hps[1]
abs(hps[1]-hps[3])
tapply(iiris$Sepal.Length,iris$Species,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
s<-split(df,df$Month)
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")], na.rm = T))
tapply(df[,c("Ozone","Solar.R","Wind")], df$Month, mean)
tapply(df[,c("Ozone")], df$Month, mean)
tapply(df[,c("Ozone","Solar.R","Wind")], df$Month, mean, na.rm=T)
tapply(df[,c("Ozone")], df$Month, mean, na.rm=T)
tapply(df[,c("Solar.R")], df$Month, mean, na.rm=T)
tapply(df[,c("Wind")], df$Month, mean, na.rm=T)
tapply(df[,1:3], df$Month, mean, na.rm=T)
tapply(df[,1], df$Month, mean, na.rm=T)
tapply(df$Ozone, df$Month, mean, na.rm=T)
tapply(df, df$Month, mean, na.rm=T)
by(df[,c("Ozone","Solar.R","Wind")],df$Month, mean, na.rm=T)
by(df[,1:3],df$Month, mean, na.rm=T)
by(df[,1:3,drop=T],df$Month, mean, na.rm=T)
by(df[,1:3,drop=T],df$Month, mean, na.rm=T)
by(df[,1:3,drop=T],df$Month, mean, na.rm=T,drop=T)
by(df[,1:3,drop=T],df$Month, drop=T, mean, na.rm=T,drop=T)
?datasets
s<-split(iris,iris$Species)
sapply(s,function(x) mean(x[,"Sepal.Length"], na.rm = T))
apply(iris[, 1:4], 2, mean)
head(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
hps<-sapply(split(mtcars$hp, mtcars$cyl), mean)
abs(hps[1]-hps[3])
x<-matrix(rnorm(1000000), nrow = 1000) #create huge invertable matrix
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
return(m)
}
source("best.R")
best("TX", "heart attack")
setwd("/git/datasciencecoursera/3_Get_Data")
?download.data()
?download.file()
?read.table()
?read.csv2()
?read.xlsx()
library(xlsx)
library("xlsx")
import("xlsx")
library(xlsx)
install.packages("xlsx")
library("xlsx")
library(xlsx)
install.packages("rJava")
install.packages("rJava")
library("rJava")
library("xlsx")
library("xlsxjars")
library("xlsx")
library("xlsx")
library("xlsx")
install.packages("openxlsx")
library("openxlsx")
?read.openxlsx()
?read.xlsx()
?write.xlsx()
library("xml")
install.packages("xml")
library("XML")
install.packages("XML")
library("XML")
fileUrl<- "http://www.w3schools.com/xml/simple.xml"
doc<-xmlTreeParse(fileUrl,useInternal=T)
rootNode<-xmlRoot(doc)
rootNode
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
?xmlSApply()
xpathSApply(rootNode, "//name",xmlValue)
xpathSApply(rootNode, "//price",xmlValue)
names.length()
length(names)
names<-xpathSApply(rootNode, "//name",xmlValue)
prices<-xpathSApply(rootNode, "//price",xmlValue)
length(names)
names
prices
library("JSON")
install.packaages("JSON")
install.packages("JSON")
library("jsonlite")
jsonData<-fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$owner)
names(jsonData$owner$login)
jsonData$owner$login
myjson<-toJSON(iris, pretty=T)
cat(myjson)
iris2<-fromJSON(myjson)
summary(iris2)
library(data.table)
library("data.table)
library("data.table")
library("data.table")
install.packages("data.table")
library("data.table")
df<-data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(df,3)
dt<-data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(dt,3)
tables(dt) #note: 's' at the end
dt.tables() #note: 's' at the end
tables() #note: 's' at the end
dt[2,]
dt[dt$y=="a"]
dt
dt[,list(mean(x),sum(z))]
dt[,w:=z^2]
dt
setkey(dt,x)
dt('a')
dt['a']
setkey(dt,y)
dt['a']
dt['c']
?fread()
f<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv "
download.file(f)
data<-download.file(f)
?download.file()
data<-download.file(f, "acs_data")
f<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(f, "acs_data")
f<-"https://d396qusza40orc.cloudfront.net/getdata-data-ss06hid.csv"
download.file(f, "acs_data")
download.file(f, "acs_data", method="curl")
data<-read.csv2("acs_data")
data
f<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv "
download.file(f, "acs_data", method="curl")
data<-read.csv2("acs_data")
data
summary(data)
summary(data)
names(data)
data[[1]]
data[1,]
names(data)
data[,data$VAL==24]
nrow(data)
nrow(data[,data$VAL=="24"])
nrow(data[,data$VAL=="0024"])
nrow(data[,data$VAL==0024])
class(data[VAL])
class(data[[VAL])
class(data[[VAL]])
class(data[[$VAL]])
class(data[$VAL])
class(data[["VAL"]])
class(data[1,"VAL"])
data[1,"VAL"]
data[1,data$VAL]
names(data)
ncol(data)
?read.csv2
data<-read.csv2("acs_data",sep=".")
names(data)
ncol(data)
data<-read.csv2("acs_data",sep=",")
names(data)
nrow(data)
ncol(data)
nrow(data[,data$VAL==0024])
nrow(data[,data$VAL=="0024"])
data[1,data$VAL]
data[1,"VAL"]
nrow(data[,data$VAL==24])
nrow(data[,"VAL"==24])
data[1,"VAL"]
nrow(data[,data$VAL==24])
data$VAL
data$VAL==24
nrow(data[data$VAL==24,])
nrow(data[data$VAL==24,data$VAL])
nrow(data[data$VAL==24,"VAL"])
data[data$VAL==24,5]
data[data$VAL==24,15]
data[data$VAL==24,"VAL"]
nrow(data[data$VAL==24,"VAL"],na.rm=T)
nrow(data[data$VAL==24,"VAL"],na.rm=?T)
?nrow
data[data$VAL==24,"VAL"]
data[data$VAL==24,]
data$VAL==24
sum(data$VAL==24, na.rm=T)
f<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(f, "ngap_data", method="curl")
?read.xlsx
dat<-read.xlsx("ngap_data",rows=[18-23], cols=[7-15])
dat<-read.xlsx("ngap_data",rows=c(18-23), cols=c(7-15)
)
dat<-read.xlsx("ngap_data",rows=c(18...23), cols=c(7...15))
dat<-read.xlsx("ngap_data",rows=c(18...,23), cols=c(7...,15))
dat<-read.xlsx("ngap_data",rows=c(18:23), cols=c(7:15))
names(dat)
sum(dat$Zip*dat$Ext,na.rm=T)
f<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
download.file(f,"balt_data",method="curl")
?read.xml
?read.XML
doc<-xmlTreeParse(fileUrl,useInternal=T)
rootNode<-xmlRoot(doc)
doc<-xmlTreeParse(f,useInternal=T)
doc<-xmlTreeParse("balt_data",useInternal=T)
rootNode<-xmlRoot(doc)
rootNode
names(rootNode)
xmlName(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
names<-xpathSApply(rootNode, "//zipcode",xmlValue)
names
names=="21231"
sum(names=="21231",na.rm=T)
download.file(f,"acs2_data",method="curl")
?fread
dt<-fread("acs2_data")
download.file(f,"acs2_data",method="curl")
f<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(f,"acs2_data",method="curl")
dt<-fread("acs2_data")
dt
dt[,mean(pwgtp15),by=SEX]
