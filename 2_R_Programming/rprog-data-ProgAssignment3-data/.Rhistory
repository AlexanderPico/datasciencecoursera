}else{
print("Outcome: No Good!")
}
}
best("CA","heart failure")
#best hospital in state
best<-function(state,outcome){
##Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
##Check that state and outcome are valid
if(state %in% data[,7]){
print("State: OK")
}else{
print("State: No Good!")
}
outs<-c("heart attack","heart failure","pneumonia")
if(outcome %in% outs){
print("Outcome: OK")
}else{
print("Outcome: No Good!")
}
}
best("CA","heart failure")
best("CA","heart attack")
best("CA","pneumonia")
best("CA","pfneumonia")
best("TX","pfneumonia")
best<-function(state,outcome){
##Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
##Check that state and outcome are valid
if(state %in% data[,7]){
print("State: OK")
}else{
print("State: No Good!")
}
validOutcomes<-c("heart attack","heart failure","pneumonia")
outcomeCheck<-match(outcome, validOutcomes)
outcomeIndex = 0
if(outcomeCheck==1){outcomeIndex = 11}
else if(outcomeCheck==2){outcomeIndex = 17}
else if(outcomeCheck==3){outcomeIndex = 23}
if(outcomeIndex==0){
print("Outcome: No Good!")
}else{
print("Outcome: OK")
}
}
best("TX","pneumonia")
best("TX","pnfeumonia")
best<-function(state,outcome){
##Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
##Check that state and outcome are valid
if(state %in% data[,7]){
print("State: OK")
}else{
print("State: No Good!")
}
validOutcomes<-c("heart attack","heart failure","pneumonia")
outcomeCheck<-match(outcome, validOutcomes)
outcomeIndex = 0
if(is.na(outcomeCheck)){
print("Outcome: No Good!")
return
}else {
print("Outcome: OK")
}
if(outcomeCheck==1){outcomeIndex = 11}
else if(outcomeCheck==2){outcomeIndex = 17}
else if(outcomeCheck==3){outcomeIndex = 23}
}
best("TX","pnfeumonia")
best<-function(state,outcome){
##Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
##Check that state and outcome are valid
if(state %in% data[,7]){
print("State: OK")
}else{
print("State: No Good!")
}
validOutcomes<-c("heart attack","heart failure","pneumonia")
outcomeCheck<-match(outcome, validOutcomes)
outcomeIndex = 0
if(is.na(outcomeCheck)){
print("Outcome: No Good!")
return(NULL)
}else {
print("Outcome: OK")
}
if(outcomeCheck==1){outcomeIndex = 11}
else if(outcomeCheck==2){outcomeIndex = 17}
else if(outcomeCheck==3){outcomeIndex = 23}
}
best("TX","pnfeumonia")
best<-function(state,outcome){
##Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
##Check that state and outcome are valid
if(state %in% data[,7]){
print("State: OK")
}else{
print("State: No Good!")
}
validOutcomes<-c("heart attack","heart failure","pneumonia")
outcomeCheck<-match(outcome, validOutcomes)
outcomeIndex = 0
if(is.na(outcomeCheck)){
print("Outcome: No Good!")
exit
}else {
print("Outcome: OK")
}
if(outcomeCheck==1){outcomeIndex = 11}
else if(outcomeCheck==2){outcomeIndex = 17}
else if(outcomeCheck==3){outcomeIndex = 23}
}
best("TX","pnfeumonia")
est hospital in state
best<-function(state,outcome){
##Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
##Check that state and outcome are valid
if(state %in% data[,7]){
print("State: OK")
}else{
print("State: No Good!")
}
validOutcomes<-c("heart attack","heart failure","pneumonia")
outcomeCheck<-match(outcome, validOutcomes)
outcomeIndex = 0
if(is.na(outcomeCheck)){
print("Outcome: No Good!")
return()
}else {
print("Outcome: OK")
}
if(outcomeCheck==1){outcomeIndex = 11}
else if(outcomeCheck==2){outcomeIndex = 17}
else if(outcomeCheck==3){outcomeIndex = 23}
}
best("TX","pnfeumonia")
best<-function(state,outcome){
##Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
##Check that state and outcome are valid
if(state %in% data[,7]){
print("State: OK")
}else{
print("State: No Good!")
}
validOutcomes<-c("heart attack","heart failure","pneumonia")
outcomeCheck<-match(outcome, validOutcomes)
outcomeIndex = 0
if(is.na(outcomeCheck)){
print("Outcome: No Good!")
exit()
}else {
print("Outcome: OK")
}
if(outcomeCheck==1){outcomeIndex = 11}
else if(outcomeCheck==2){outcomeIndex = 17}
else if(outcomeCheck==3){outcomeIndex = 23}
}
best("TX","pnfeumonia")
best<-function(state,outcome){
##Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
##Check that state and outcome are valid
if(state %in% data[,7]){
print("State: OK")
}else{
print("State: No Good!")
}
validOutcomes<-c("heart attack","heart failure","pneumonia")
outcomeCheck<-match(outcome, validOutcomes, nomatch=0)
outcomeIndex = 0
if(outcomeCheck==0){
print("Outcome: No Good!")
}else {
print("Outcome: OK")
}
if(outcomeCheck==1){outcomeIndex = 11}
else if(outcomeCheck==2){outcomeIndex = 17}
else if(outcomeCheck==3){outcomeIndex = 23}
}
best("TX","pnfeumonia")
best("TX","pneumonia")
best<-function(state,outcome){
##Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
##Check that state and outcome are valid
if(!state %in% data[,7]){
print("State: No Good!")
}
validOutcomes<-c("heart attack","heart failure","pneumonia")
outcomeCheck<-match(outcome, validOutcomes, nomatch=0)
outcomeIndex = 0
if(outcomeCheck==0){
print("Outcome: No Good!")
}
if(outcomeCheck==1){outcomeIndex = 11} #heart attack column
else if(outcomeCheck==2){outcomeIndex = 17} #heart failure column
else if(outcomeCheck==3){outcomeIndex = 23} #pneumonia column
##Return hospital name in state with lowest 30-day death]
data[,outcomeIndex]<-as.numeric(data[,outcomeIndex]) #strings to numbers
data[min(data[,outcomeIndex]),2] #hospital name for min outcome
}
best("TX","pneumonia")
best<-function(state,outcome){
##Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
##Check that state and outcome are valid
if(!state %in% data[,7]){
print("State: No Good!")
}
validOutcomes<-c("heart attack","heart failure","pneumonia")
outcomeCheck<-match(outcome, validOutcomes, nomatch=0)
outcomeIndex = 0
if(outcomeCheck==0){
print("Outcome: No Good!")
}
if(outcomeCheck==1){outcomeIndex = 11} #heart attack column
else if(outcomeCheck==2){outcomeIndex = 17} #heart failure column
else if(outcomeCheck==3){outcomeIndex = 23} #pneumonia column
##Return hospital name in state with lowest 30-day death]
data[,outcomeIndex]<-as.numeric(data[,outcomeIndex]) #strings to numbers
data[min(data[,outcomeIndex],na.rm=T),2] #hospital name for min outcome
}
best("TX","pneumonia")
best<-function(state,outcome){
##Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
##Check that state and outcome are valid
if(!state %in% data[,7]){
print("State: No Good!")
}
validOutcomes<-c("heart attack","heart failure","pneumonia")
outcomeCheck<-match(outcome, validOutcomes, nomatch=0)
outcomeIndex = 0
if(outcomeCheck==0){
print("Outcome: No Good!")
}
if(outcomeCheck==1){outcomeIndex = 11} #heart attack column
else if(outcomeCheck==2){outcomeIndex = 17} #heart failure column
else if(outcomeCheck==3){outcomeIndex = 23} #pneumonia column
##Return hospital name in state with lowest 30-day death]
data[,outcomeIndex]<-suppressWarnings(as.numeric(data[,outcomeIndex])) #strings to numbers
data[min(data[,outcomeIndex],na.rm=T),2] #hospital name for min outcome
}
best("TX","pneumonia")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best<-function(state,outcome){
##Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
##Check that state and outcome are valid
if(!state %in% data[,7]){
error("invalid state")
}
validOutcomes<-c("heart attack","heart failure","pneumonia")
outcomeCheck<-match(outcome, validOutcomes, nomatch=0)
outcomeIndex = 0
if(outcomeCheck==0){
print("Outcome: No Good!")
}
if(outcomeCheck==1){outcomeIndex = 11} #heart attack column
else if(outcomeCheck==2){outcomeIndex = 17} #heart failure column
else if(outcomeCheck==3){outcomeIndex = 23} #pneumonia column
##Return hospital name in state with lowest 30-day death]
data[,outcomeIndex]<-suppressWarnings(as.numeric(data[,outcomeIndex])) #strings to numbers
data[min(data[,outcomeIndex],na.rm=T),2] #hospital name for min outcome
}
best("TX32", "heart attack")
err("invalid state")
stop("invalid state")
best<-function(state,outcome){
##Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
##Check that state and outcome are valid
if(!state %in% data[,7]){
stop("invalid state")
}
validOutcomes<-c("heart attack","heart failure","pneumonia")
outcomeCheck<-match(outcome, validOutcomes, nomatch=0)
outcomeIndex = 0
if(outcomeCheck==0){
stop("invalid outcome")
}
if(outcomeCheck==1){outcomeIndex = 11} #heart attack column
else if(outcomeCheck==2){outcomeIndex = 17} #heart failure column
else if(outcomeCheck==3){outcomeIndex = 23} #pneumonia column
##Return hospital name in state with lowest 30-day death]
data[,outcomeIndex]<-suppressWarnings(as.numeric(data[,outcomeIndex])) #strings to numbers
data[min(data[,outcomeIndex],na.rm=T),2] #hospital name for min outcome
}
best("TX32", "heart attack")
data[,11]
data[,17]
data[,23]
best("TX", "heart failure")
best("MD", "heart attack")
source("best.R")
best("TX", "heart failure")
source("best.R")
best("TX", "heart failure")
source("best.R")
best("TX", "heart failure")
debugSource('/git/datasciencecoursera/2_R_Programming/rprog-data-ProgAssignment3-data/best.R', echo=TRUE)
best("TX", "heart failure")
best("MD", "heart attack")
source("best.R")
best("TX", "heart failure")
oocm <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
oocm[,11]<-as.numeric(oocm[,11])
oocm[min(oocm[,11]),7]
oocm[min(oocm[,11],na.rm=T),7]
oocm[min(oocm[,11],na.rm=T),2]
source("best.R")
best("TX", "heart attack")
min(oocm[,11],na.rm=T)
oocm[oocm[,7]=="state"TX"",c(2,11)]
oocm[oocm[,7]=="TX",c(2,11)]
sub = oocm[oocm[,7]=="TX",c(2,11)]
sub[[1]]
sub[[1]][sub[[2]]==min(sub[[2]])]
sub[which.min(sub[[2]]),1]
?which.min
source("best.R")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source("best.R")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
source("submitscript3.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
source("submitscript3.R")
source("submitscript3.R")
submit()
submit()
submit()
oocm[,11]
txoocm<-oocm[oocm[,7]=="TX",]
txoocm[,11]
order(txoocm[,11])
complete.cases(txoocm[,11])
txoocm[complete.cases(txoocm[,11]),]
txoocm[complete.cases(txoocm[,11]),][[11]]
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
submit()
submit()
submit()
submit()
source("best.R")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
oocm
oocm[7]
oocm[c(2,11)]
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcomeIndex = 11
data[,outcomeIndex]<-suppressWarnings(as.numeric(data[,outcomeIndex])) #strings to numbers
nrow(data[7])
nrow(data[c(2,11)])
?unique
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
source("rankall.R")
head(rankall("pneumonia", "worst"), 3)
tail(rankall("pneumonia", "worst"), 3)
submit()
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
submit()
submit()
submit()
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
source("rankall.R")
tail(rankall("pneumonia", "worst"), 3)
debugSource('/git/datasciencecoursera/2_R_Programming/rprog-data-ProgAssignment3-data/rankall.R', echo=TRUE)
tail(rankall("pneumonia", "worst"), 3)
stateData[[11]]
source('/git/datasciencecoursera/2_R_Programming/rprog-data-ProgAssignment3-data/rankall.R', echo=TRUE)
source("rankall.R")
tail(rankall("pneumonia", "worst"), 3)
debugSource('/git/datasciencecoursera/2_R_Programming/rprog-data-ProgAssignment3-data/rankall.R', echo=TRUE)
tail(rankall("pneumonia", "worst"), 3)
stateData[[7]]
stateData[[11]]
stateData[[23]]
source("rankall.R")
tail(rankall("pneumonia", "worst"), 3)
submit()
source("submitscript3.R")
submit()
funLoop = function(x) {
# Initialize res with x
res = x
n = nrow(x)
k = 1
for (i in 1:n) {
if (!any(is.na(x[i,]))) {
res[k, ] = x[i,]
k = k + 1
}
}
res[1:(k-1), ]
}
funApply = function(x) {
drop = apply(is.na(x), 1, any)
x[!drop, ]
}
#Make up large test case
xx = matrix(rnorm(2000000),100000,20)
xx[xx>2] = NA
x = as.data.frame(xx)
Rprof("exampleLoop.out")
y = funLoop(xx)
Rprof(NULL)
Rprof("exampleApply.out")
y = funApply(xx)
Rprof(NULL)
summaryRprof()
summaryRprof("exampleApply.out")
summaryRprof("exampleLoop.out")
by.self
by.self("exampleLoop.out")
Rprof("exampleLoop.out", line.profiling=T)
y = funLoop(xx)
Rprof(NULL)
summaryRprof("exampleLoop.out", lines="show")
Rprof("exampleLoop.out")
y = funLoop(xx)
Rprof(NULL)
summaryRprof("exampleLoop.out")
Rprof("exampleLoop.out", line.profiling=T)
y = funLoop(xx)
Rprof(NULL)
summaryRprof("exampleLoop.out", lines="show")
Rprof("exampleOmit.out")
y = funOmit(xx)
Rprof(NULL)
summaryRprof("exampleOmit.out")
funOmit = function(x) {
# The or operation is very fast, it is replacing the any function
# Also note that it doesn't require having another data frame as big as x
drop = F
n = ncol(x)
for (i in 1:n)
drop = drop | is.na(x[, i])
x[!drop, ]
}
Rprof("exampleOmit.out")
y = funOmit(xx)
Rprof(NULL)
summaryRprof("exampleOmit.out")
Rprof("exampleLoop.out", line.profiling=T)
y = funLoop(xx)
Rprof(NULL)
summaryRprof("exampleLoop.out", lines="show")
Rprof("exampleLoop.out")
y = funLoop(xx)
Rprof(NULL)
summaryRprof("exampleLoop.out")
system.time(funOmit(xx))
system.time(funLoop(xx))
Rprof("exampleLoop.out")
y = funLoop(xx)
Rprof(NULL)
summaryRprof("exampleLoop.out")
